## Posting non-JSON


JSON is great except when something else is needed.  The question came up on how to post in other than json using ORDS.

ORDS creates a :body bind variable which is exposed to the REST source as a BLOB. 

# Use the ORDS PLSQL api

Here's a simple example that takes in the BODY does a substr and prints it back out as text.

{% highlight Ada %}
-- Generated by Oracle SQL Developer REST Data Services 17.4.0.258.1058
-- Exported REST Definitions from ORDS Schema Version 17.3.0.248.08.45
-- Schema: KLRICE   Date: Tue Oct 03 12:30:14 EDT 2017
--
BEGIN
  ORDS.ENABLE_SCHEMA(
      p_enabled             => TRUE,
      p_schema              => 'KLRICE',
      p_url_mapping_type    => 'BASE_PATH',
      p_url_mapping_pattern => 'klrice',
      p_auto_rest_auth      => FALSE);    

  ORDS.DEFINE_MODULE(
      p_module_name    => 'test',
      p_base_path      => '/test/',
      p_items_per_page =>  25,
      p_status         => 'PUBLISHED',
      p_comments       => NULL);      
  ORDS.DEFINE_TEMPLATE(
      p_module_name    => 'test',
      p_pattern        => 'body',
      p_priority       => 0,
      p_etag_type      => 'HASH',
      p_etag_query     => NULL,
      p_comments       => NULL);
  ORDS.DEFINE_HANDLER(
      p_module_name    => 'test',
      p_pattern        => 'body',
      p_method         => 'POST',
      p_source_type    => 'plsql/block',
      p_items_per_page =>  0,
      p_mimes_allowed  => '',
      p_comments       => NULL,
      p_source         => 
 q'[declare
  l_incoming varchar2(200);
begin
   l_incoming := dbms_lob.substr( :body, 32000, 1 );

   sys.htp.p('non-json-reponse:' || l_incoming );
end;]'); 

  COMMIT; 
END;
{% endhighlight %}

##

## cUrl Request
{% highlight bash %}

curl -X "POST" "http://localhost:9090/ords/klrice/test/body"      -H "Content-Type: text/plain; charset=utf-8"      -d "something"


non-json-reponse:736F6D657468696E67
{% endhighlight %}

